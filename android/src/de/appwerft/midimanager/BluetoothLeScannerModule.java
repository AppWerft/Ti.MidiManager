/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.midimanager;

import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothManager;
import android.bluetooth.le.BluetoothLeScanner;
import android.bluetooth.le.ScanCallback;
import android.bluetooth.le.ScanResult;
import android.content.Context;
import android.content.pm.PackageManager;
import android.os.Build;

@Kroll.module(parentModule = MidimanagerModule.class)
public class BluetoothLeScannerModule extends MidimanagerModule {

	// Standard Debugging variables
	private static final String LCAT = "MidimanagerModule";
	
	private static Context ctx;
	private static BluetoothLeScanner scanner;
	private static BluetoothManager bluetoothManager = null;

	private static BluetoothAdapter adapter;
	private static Object scanCallback = null;
	private static boolean isBleSupported = false;
	private static boolean isLollipopApi = (Build.VERSION.SDK_INT > Build.VERSION_CODES.KITKAT_WATCH);

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public BluetoothLeScannerModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
		ctx = app.getApplicationContext();
		isBleSupported = ctx.getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE);
		if (isBleSupported) {
			initialize();
		} else {
			Log.e(LCAT, "No Bluetooth low energy support ???");
		}

		// put module init code that needs to run when the application is created
	}

	// Methods
	@Kroll.method
	public boolean hasSystemFeature() {
		return ctx.getPackageManager().hasSystemFeature(PackageManager.FEATURE_MIDI);

	}

	@Kroll.method
	public void startScan() {

	}

	private static boolean initialize() {

		/*
		 * For API level 18 and above, get a reference to BluetoothAdapter through
		 * BluetoothManager.
		 */
		if (null == bluetoothManager) {
			bluetoothManager = (BluetoothManager) ctx.getSystemService(Context.BLUETOOTH_SERVICE);

			if (bluetoothManager == null) {
				Log.e(LCAT, "initialize() : Unable to initialize BluetoothManager.");
				return false;
			}
		}
		adapter = bluetoothManager.getAdapter();

		if (adapter == null) {
			Log.e(LCAT, "initialize() : Unable to obtain a BluetoothAdapter.");
			return false;
		}

		if (isLollipopApi) {
			scanCallback = new ScanCallback() {

				@Override
				public void onScanFailed(int errorCode) {
					Log.e(LCAT, "onScanFailed() : Error = " + errorCode);
				}

				@Override
				public void onScanResult(int callbackType, ScanResult result) {

					if (null != result) {
						BluetoothDevice device = result.getDevice();

						if (null != device) {
							onDeviceFound(device, device.getName(), device.getAddress(), result.getRssi(),
									device.getType());
						} else
							Log.e(LCAT, "onScanResult() : Cannot get BluetoothDevice !!!");
					} else {
						Log.e(LCAT, "onScanResult() : Cannot get ScanResult !!!");
					}
				}
			};
		}

		return true;
	}

	private static void onDeviceFound(BluetoothDevice device, String name, String address, int rssi, int type) {

	}

	private BluetoothAdapter.LeScanCallback mLeScanCallback = new BluetoothAdapter.LeScanCallback() {

		@Override
		public void onLeScan(BluetoothDevice device, int rssi, byte[] scanRecord) {
			// onDeviceFound(device, device.getName(), device.getAddress(), rssi,
			// device.getType());
		}

	};
}
// https://recordnotfound.com/BLE-MIDI-for-Android-kshoji-80185